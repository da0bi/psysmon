#!/usr/bin/env python

#
#   Convert raw rt-130 data files to mini-seed
#
#   Steve Azevedo, November 2008
#

import sys, os, os.path, re, string, math, time, array
import psysmon.packages.reftek.pn130 as pn130
import psysmon.packages.reftek.TimeDoy as TimeDoy
#import mseed_py
#from guppy import hpy
#H = hpy ()

PROG_VERSION = '2011.280'

RAWFILE = []
NUM_CHANNELS = pn130.NUM_CHANNELS
NUM_STREAMS  = pn130.NUM_STREAMS

#   Mini-seed encoding format codes
ENCODING_KEY = { 'ASCII':0, 'INT16':1, 'INT32':3, 'FLOAT32':4, 'FLOAT64':5, 'STEIM1':10, 'STEIM2':11, 'GEOSCOPE24':12, 'GEOSCOPE163':13, 'GEOSCOPE164':14, 'SRO':30, 'DWWSSN':32 }

newLogRE = re.compile ("(\d{7})\t\w\w\texp \d\d\tbytes.*")
zipRE = re.compile (".*\d{7}\.\w{4}(\.\d\d)?\.ZIP")
tarRE = re.compile (".*\d{7}\.\w{4}(\.\d\d)?\.tar")

class Par (object) :
    __slots__ = ('das', 'station', 'loccode', 'netcode', 'channel', 'refchan', 'refstrm', 'encoding', 'samplerate', 'gain')
    def __init__ (self) :
        self.das = None
        self.station = None
        self.loccode = None
        self.netcode = None
        self.channel = None
        self.refchan = None
        self.refstrm = None
        self.encoding = None
        self.samplerate = None
        self.gain = None

def get_order (line) :
    '''   Reads order of fields in parameter file   '''
    order = {}
    line = line[1:]
    flds = string.split (line, ';')
    i = 0
    for f in flds :
        order[string.strip (f)] = i
        i += 1
        
    return order
    
def read_par_file (file) :
    '''
       Read parameter file containing: das;station;netcode;channel;loccode;encoding;samplerate;gain
    '''
    global PARAMETERS
    PARAMETERS = {}
    try :
        fh = open (file, 'U')
    except :
        return False
    
    order = None
    while 1 :
        line = fh.readline ()
        if not line : break
        line = line.strip ()
        if line[0] == '#' :
            order = get_order (line)
            #   'das', 'refchan', 'refstrm' form the key. All are required.
            if not order.has_key ('das') :
                return False
        
            if not order.has_key ('refchan') :
                return False
        
            if not order.has_key ('refstrm') :
                return False
            
            continue
        
        flds = string.split (line, ';')
        
        if order == None :
            sys.stderr.write ("Error: First line in paramater file does not describe columns!")
            return False
        
        if len (flds) != len (order.keys ()) :
            sys.stderr.write ('Error in parameter file:\n%s\n' % line)
            return False
        
        par = Par ()
        #   Key on DAS:refchan:refstrm
        id = "%s:%s:%s" % (string.strip (flds[order['das']]),
                           string.strip (flds[order['refchan']]),
                           string.strip (flds[order['refstrm']]))
        
        par.das = string.strip (flds[order['das']])
        par.refchan = string.strip (flds[order['refchan']])
        par.refstrm = string.strip (flds[order['refstrm']])
        
        #print flds, order
        if order.has_key ('station') :
            par.station = string.strip (flds[order['station']])
        if order.has_key ('netcode') :
            par.netcode = string.strip (flds[order['netcode']])
        if order.has_key ('channel') :
            par.channel = string.strip (flds[order['channel']])
        if order.has_key ('loccode') :
            par.loccode = string.strip (flds[order['loccode']])
        if order.has_key ('encoding') :
            try :
                s = string.strip (flds[order['encoding']])
                par.encoding = ENCODING_KEY[s]
            except KeyError :
                sys.stderr.write ("Unknown encoding format in parameter file: %s\n" % s)
                return False
        if order.has_key ('samplerate') :
            par.samplerate = string.strip (flds[order['samplerate']])
        if order.has_key ('gain') :
            par.gain = string.strip (flds[order['gain']])
            
        if PARAMETERS.has_key (id) :
            sys.stderr.write ("Warning Will Robinson: Par file entry for this das, refchan, refstrm already exists. Using new value.")
            
        PARAMETERS[id] = par
        
    return True
    
def read_input_files (file) :
    global RAWFILE
    try :
        fh = open (file, "r")
        while 1 :
            line = fh.readline ()
            if not line : break
            line = line[:-1]
            if line :
                RAWFILE.append (line)
            
        fh.close ()
    except :
        return False
    
    return True
            
def create_outdir (dir) :
    if os.path.exists (dir) :
        return True
    
    try :
        os.makedirs (dir)
    except :
        return False
    
    return True
#
#   Read Command line arguments
#
def get_args () :
    '''
       RAWFILE -> TRD input file name(s)
       NETCODE -> Net code from DMC, 2 ascii characters
       STATION -> Station code, 1 to 5 ascii characters
       CHANNEL -> Channel description, see Appendix A of SEED manual
       LOCCODE -> Location Code
       PARAMETERS -> Dictionary of Par keyed on DAS:refchan:refstrm
       ENCODING -> Mini-seed file encoding
       BYTE_ORDER -> BIG or LITTLE
       BLOCKSIZE -> 1024, 4096, or 8192
       WRITE_ASCII -> Write ASCII output file.
       R -> Write R directories
       Y -> Write year directories
       X -> Don't write any data
    '''
    global RAWFILE, NETCODE, STATION, CHANNEL, LOCCODE, OUTDIR, PARAMETERS, ENCODING, BLOCKSIZE, BYTE_ORDER
    global VERBOSE, WRITE_ASCII, R, LOG, X, Y, DAS_KEEP, CHAN_KEEP, STRM_KEEP, DOY_KEEP
    
    from optparse import OptionParser
    
    oparser = OptionParser ()
    
    oparser.usage = "rt2ms %s\nrt2ms --rtfile=rt_130_file_or_directory|--filelist=rtfile_list [options]" % PROG_VERSION
    
    oparser.description = "Convert rt-130 raw data to mini-seed."
    
    oparser.add_option ("-f", "--rtfile", dest = "rt_file",
                        help = "The raw rt-130 file.",
                        metavar = "rt_file")
    
    oparser.add_option ("-F", "--filelist", dest = "file_list",
                        help = "Text file containing a list of input files, one per line.",
                        metavar = "file_list")
    
    oparser.add_option ("-d", "--dirlist", dest = "dir_list",
                        help = "Search in a single directory for neo output files.",
                        metavar = "dir_list")
    
    oparser.add_option ("-D", "--dirsearch", dest = "dir_search",
                        help = "Search a directory tree for neo output files.",
                        metavar = "dir_search")
    
    oparser.add_option ("-b", "--byteorder", dest = "byte_order",
                        help = "Mini-SEED byte order: BIG, or LITTLE",
                        metavar = "byte_order")
    
    oparser.add_option ("-r", "--blocksize", dest = "blocksize",
                        help = "Record length. Mini-SEED block size: 1024, 4096, 8192",
                        metavar = "blocksize")
    
    oparser.add_option ("-p", "--parfile", dest = "par_file",
                        help = "[Overrides --encoding, --netcode, --station, --channel, --locationcode.]\n\
                               Parameter file used to set encoding, netcode, station, channel, loccode, samplerate, gain.\n\
                               The file contains colon separated lists.\n\
                               The first line describes the\n\
                               order and the first char must be '#'.\n\
                               As example the first four lines could be:\n\
                               #das;refchan;refstrm;netcode;channel;loccode;encoding\n\
                               9882; 1; 1; XY; EPZ; 00; STEIM2\n\
                               9882; 2; 1; XY; EPN; 00; STEIM2\n\
                               9882; 3; 1; XY; EPZ; 00; STEIM2\n\
                               \n\
                               Allowed fields:\n\
                               das;station;refchan;refstrm;netcode;channel;loccode;encoding;samplerate;gain",
                        metavar = "par_file")
    
    oparser.add_option ("-e", "--encoding", dest="encoding",
                        help = "Mini-SEED encoding format: INT16, INT32, STEIM1, or STEIM2.\nSTEIM2 is the Default.",
                        metavar = "encoding")
    
    oparser.add_option ("-n", "--netcode", dest = "netcode",
                        help = "DMC assigned network code, two ascii characters.",
                        metavar = "netcode")
    
    oparser.add_option ("-s", "--station", dest = "station",
                        help = "Station designator, one to five ascii characters.",
                        metavar = "station")
    
    oparser.add_option ("-c", "--channel", dest = "channel",
                        help = "SEED channel name, three ascii characters.",
                        metavar = "channel")
    
    oparser.add_option ("-l", "--locationcode", dest = "loccode",
                        help = "Location code.",
                        metavar = "loccode")
    
    oparser.add_option ("--channelskeep", dest="channels_keep", action="store",
                        help="A comma separated list of channels to extract.",
                        metavar="channels_keep")
    
    oparser.add_option ("--streamskeep", dest="streams_keep", action="store",
                        help="A comma separated list of streams to extract.",
                        metavar="streams_keep")
    
    oparser.add_option ("--daskeep", dest="das_keep", action="store",
                        help="Filter out data for all DAS's except one.",
                        metavar="das_keep")
    
    oparser.add_option ("--doykeep", dest="doy_keep", action="store",
                        help="Keep data that start on this day of year. Comma separated list.",
                        metavar="doy_keep")
    
    oparser.add_option ("-o", "--outputdir", dest = "out_dir",
                        help = "Output directory",
                        metavar = "out_dir")
    
    oparser.add_option ("-a", "--ascii", dest = "ascii",
                        action = "store_true", default = False,
                        help = "Write ASCII output files")
  
    oparser.add_option ("-R", "--rdirs", dest = "rdirs",
                        action = "store_true", default = False,
                        help = "Write data in ref2mseed style R subdirectories.")
    
    oparser.add_option ("-Y", "--ydirs", dest = "ydirs",
                        action = "store_true", default = False,
                        help = "Create year directories. Implies -R option.")    
    
    oparser.add_option ("-L", "--log", dest = "log",
                        action = "store_true", default = False,
                        help = "Write log file.")
    
    oparser.add_option ("-v", "--verbose", dest = "verbose",
                        action = "store_true", default = False,
                        help = "Verbose mode. May be too verbose?")
    
    oparser.add_option ("-X", "--write_no_data", dest = "write_no_data",
                        action = "store_true", default = False,
                        help = "Don't write mseed data.")
    
    options, args = oparser.parse_args ()
    
    if options.rt_file != None :
        RAWFILE.append (options.rt_file)
    elif options.file_list != None :
        if not read_input_files (options.file_list) :
            sys.stderr.write ("Failed to read input files\n")
            sys.exit ()
    elif options.dir_list != None :
        for r, d, F in os.walk (options.dir_list) :
            for f in F :
                if zipRE.match (f) or tarRE.match (f) :
                    RAWFILE.append (os.path.join (r, f))
            break
    elif options.dir_search != None :
        for r, d, F in os.walk (options.dir_search) :
            for f in F :
                if zipRE.match (f) or tarRE.match (f) :
                    RAWFILE.append (os.path.join (r, f))
    else :
        sys.stderr.write ("Input file(s) required. Try --help option.\n")
        sys.exit ()
        
    if options.out_dir != None :
        OUTDIR = options.out_dir
        if not create_outdir (OUTDIR) :
            sys.stderr.write ("Failed to create %s\n" % OUTDIR)
            sys.exit ()
    else :
        OUTDIR = "."
    
    #   Default to big endian
    BYTE_ORDER = 1
    if options.byte_order != None :
        if options.byte_order == 'LITTLE' :
            BYTE_ORDER = 0
            
    #   Default to block size of 4096
    BLOCKSIZE = 4096
    if options.blocksize != None :
        bs = options.blocksize
        if bs == '1024' :
            BLOCKSIZE = 1024
        elif bs == '512' :
            BLOCKSIZE = 512
        elif bs == '4096' :
            pass
        elif bs == '8192' :
            BLOCKSIZE = 8192
        else :
            sys.stderr.write ("Unrecognized blocksize: %s\n" % bs)
            sys.exit ()
        
    #   Default to STEIM2
    ENCODING = ENCODING_KEY['STEIM2']
    if options.encoding != None :
        try :
            ENCODING = ENCODING_KEY[options.encoding]
        except KeyError :
            sys.stderr.write ("Unrecognized encoding format on command line: %s\n" % options.encoding)
            sys.exit ()
        
    VERBOSE = options.verbose
    WRITE_ASCII = options.ascii
    R = options.rdirs
    if options.ydirs :
        R = True
        Y = True
    else :
        Y = False
        
    LOG = options.log
    X = options.write_no_data
    
    if options.netcode != None :
        NETCODE = options.netcode
    else :
        NETCODE = 'XX'
        
    if options.station != None :
        STATION = options.station
    else :
        STATION = 'XXXX'
        
    if options.channel != None :
        CHANNEL = options.channel
    else :
        CHANNEL = 'XXX'
        
    if options.loccode != None :
        LOCCODE = options.loccode
    else :
        LOCCODE = ''
        
    if options.das_keep != None :
        DAS_KEEP = {}
        flds = options.das_keep.split (',')
        for f in flds :
            DAS_KEEP[f.strip ()] = True
    else : DAS_KEEP = None
        
    if options.streams_keep != None :
        STRM_KEEP = {}
        flds = options.streams_keep.split (',')
        for f in flds :
            STRM_KEEP[int (f.strip ())] = True
    else : STRM_KEEP = None
            
    if options.channels_keep != None :
        CHAN_KEEP = {}
        flds = options.channels_keep.split (',')
        for f in flds :
            CHAN_KEEP[int (f.strip ())] = True
    else : CHAN_KEEP = None
    
    if options.doy_keep != None :
        DOY_KEEP = {}
        flds = options.doy_keep.split (',')
        for f in flds :
            DOY_KEEP[int (f.strip ())] = True    
    else : DOY_KEEP = None
        
    if options.par_file != None :
        if not read_par_file (options.par_file) :
            sys.stderr.write ("Error: Failed to read: %s\n" % options.par_file)
            sys.exit ()
    else :
        PARAMETERS = {}
        
def get_mseed_timestr (yr, doy, hr, mn, sc, ms) :
    '''   Make an libmseed timestring   '''
    tdoy = TimeDoy.TimeDoy ()
    if doy > 365 :
        ndoy = doy % 365
        sys.stderr.write ("Warning: DOY in RefTek file is %d, changing to year to %d and DOY to %d\n" % (doy, yr + 1, ndoy))
        doy = ndoy
        yr += 1
        
    mo, da = tdoy.getMonthDay (yr, doy)
    secs = float (sc) + float (ms) / 1000.0
    return "%04d/%02d/%02d %02d:%02d:%09.6f" % (yr, mo, da, hr, mn, secs)

#   XXX
#def write_ascii (timestr, fileprefix, data, samplerate, das, refchan, refstrm) :
def write_ascii (timestr, fileprefix, trace, samplerate, das, refchan, refstrm) :
    '''
       Write ASCII
    '''
    global OUTDIR, DOY, R, YR
    
    if not trace.trace :
        sys.stderr.write ("Warning: Failed to write %s.a No data.\n" % fileprefix)
        return
    
    if R :
        rdir = "R%s.%02d" % (DOY, refstrm)
        if Y :
            rdir = os.path.join ("Y%s" % YR, rdir)
            
        outdir = os.path.join (OUTDIR, rdir)    
        if not os.path.exists (outdir) :
            if not create_outdir (outdir) :
                sys.stderr.write ("Failed to create %s\n" % outdir)
            
    else :
        outdir = OUTDIR
    
    outfile = os.path.join (os.path.join (outdir, fileprefix + ":%d.a" % samplerate))
    ofh = open (outfile, "w")
    tdoy = TimeDoy.TimeDoy ()
    for n in trace.trace :
        start_epoch = tdoy.epoch (n.year, n.doy, n.hour, n.minute, n.seconds)
        start_epoch += n.milliseconds / 1000.0
        for d in n.trace :
            ofh.write ("%f\t%d\n" % (start_epoch, d))
            start_epoch += 1.0 / samplerate
        
    ofh.close ()
    trace.trace = []
    
#   XXX
#def write_mseed (timestr, fileprefix, data, samplerate, das, refchan, refstrm) :
def write_mseed (timestr, fileprefix, trace, samplerate, das, refchan, refstrm) :
    '''
       Write mseed using mseed_py
    '''
    #import mseed_py
    global NETCODE, STATION, CHANNEL, LOCCODE, OUTDIR, PARAMETERS 
    global VERBOSE, ENCODING, BYTE_ORDER, BLOCKSIZE, DOY, R, X, YR, Y
    
    if not trace.trace :
        sys.stderr.write ("Warning: Failed to write %s.m No data.\n" % fileprefix)
        return
    
    if STATION == 'XXXX' :
        station = str (das)
    else :
        station = STATION
    
    #   Set via command line switch
    netcode = NETCODE; channel = CHANNEL; loccode = LOCCODE; encoding = ENCODING
    #   Override if set via par file
    par_key = "%s:%s:%s" % (str (das), str (refchan), str (refstrm))
    if PARAMETERS :
        if PARAMETERS.has_key (par_key) :
            p = PARAMETERS[par_key]
            if p.netcode :
                netcode = p.netcode
            if p.station :
                station = p.station
            if p.channel :
                channel = p.channel
            if p.loccode :
                loccode = p.loccode
            if p.encoding :
                encoding = p.encoding
                
    verbosity = 0
    if VERBOSE : verbosity = 1
    
    #   If channel is not set, XXX, then set it to 's0c',
    #   where s is the reftek stream and c is the reftek channel
    if channel == 'XXX' :
        channel = "%d%02d" % (refstrm, refchan)
    
    byte_order = BYTE_ORDER
    blocksize = BLOCKSIZE
    
    if sys.byteorder == 'big' :
        input_byte_order = 1
    else :
        input_byte_order = 0
    
    if R :
        rdir = "R%s.%02d" % (DOY, refstrm)
        if Y :
            rdir = os.path.join ("Y%s" % YR, rdir)
            
        outdir = os.path.join (OUTDIR, rdir)    
        if not os.path.exists (outdir) :
            if not create_outdir (outdir) :
                sys.stderr.write ("Failed to create %s\n" % outdir)
            
    else :
        outdir = OUTDIR
    
    outfile = os.path.join (outdir, fileprefix + ".m")
    #   Initialize the writing routines
    #print "mseed_py.init_mseed: %s %s" % (outfile, verbosity)
    #print "Start", H.heap ()
    mseed_py.init_mseed (outfile, verbosity)
    for t in trace.trace :
        ts = get_mseed_timestr (t.year, 
                                t.doy, 
                                t.hour, 
                                t.minute, 
                                t.seconds, 
                                t.milliseconds)
        #d = array.array ('i')
        #d.fromlist (t.trace)
        #print ts, "Python length", len (t.trace)
        
        mseed_py.pack_mseed (t.trace, 
                             ts, 
                             channel, 
                             samplerate,
                             netcode,
                             station,
                             loccode)
        
    mseed_py.close_mseed (blocksize, encoding, byte_order)
    
    #print "End", H.heap ()
    
    trace.trace = []
    
    #del mseed_py
    
    '''
    #   Output file name, skipnodata, data flag, verbose?
    msr = mseed.MSRwrite (os.path.join (outdir, fileprefix + ".m"), 0, 0, verbosity)
    #   
    msr.write (netcode, 
               station, 
               channel, 
               loccode, 
               timestr, 
               samplerate, 
               data, 
               encoding=encoding, 
               reclen=blocksize,
               byteorder=byte_order)
    del msr
    ''' 
def process_event (points, event) :
    '''
       Process each event (for a given stream) in rt-130 file
    '''
    global DAS, WRITE_ASCII, DOY, YR, DAS_KEEP, CHAN_KEEP, STRM_KEEP, DOY_KEEP
    if event == None : return
    def as_ints (v) :
        if v >= 1 :
            return int (v), 1
        
        mult = 1.0
        while mult < 10000 :
            r = v * mult
            f, i = math.modf (r)
            if f * 1000.0 < 1.0 :
                return int (i), int (mult)
            
            mult = 10.0
            
        return None, None
    
    #w = event
    #print event
    fileprefix = None
    for c in range (NUM_CHANNELS) :
        das_number = event[c].unitID
        if das_number == None :
            continue
        '''
        if w[c].gain[0] == 'x' :
            #   Gain is a multiplier
            gain = int (w[c].gain[1:])
        else :
            #   Gain is in dB
            gain = int (w[c].gain[:-2])
            
        #   Need volts/bit?
        bit_weight = float (w[c].bitWeight[:-3])
        '''
        channel_number = event[c].channel_number + 1
        event_number = event[c].event
        stream_number = event[c].stream_number + 1
        doy = event[c].doy
        fileprefix = "%04d.%03d.%02d.%02d.%02d.%s.%d.%d" % (event[c].year, 
                                                            event[c].doy, 
                                                            event[c].hour, 
                                                            event[c].minute, 
                                                            event[c].seconds, 
                                                            das_number, 
                                                            stream_number, 
                                                            channel_number)
        #   Only keep these DAS's
        try :
            dum = DAS_KEEP[das_number]
        except KeyError :
            continue
        except TypeError : 
            pass
        #   Only keep these streams
        try :
            dum = STRM_KEEP[stream_number]
        except KeyError :
            continue
        except TypeError :
            pass
        #   Only keep these channels
        try :
            dum = CHAN_KEEP[channel_number]
        except KeyError :
            continue
        except TypeError :
            pass
        #   Only keep these days
        try :
            dum = DOY_KEEP[doy]
        except KeyError :
            continue
        except TypeError :
            pass
        
        #   Sample rate factor and multiplier
        #irate, mult = as_ints (float (w[c].sampleRate))
        sr = float (event[c].sampleRate)
        sample_count = int (event[c].sampleCount)
        tdoy = TimeDoy.TimeDoy ()
        mo, da = tdoy.getMonthDay (event[c].year, event[c].doy)
        sc = float (event[c].seconds) + float (event[c].milliseconds) / 1000.0
        timestr = "%04d/%02d/%02d %02d:%02d:%09.6f" % (event[c].year, mo, da, event[c].hour, event[c].minute, sc)
        
        trace = event[c]
        #for t in w[c].trace :
            #trace.extend (t)
            
        DOY = "%03d" % event[c].doy
        YR = "%04d" % event[c].year
        
        if X :
            pass
        elif trace.trace :
            if WRITE_ASCII :
                write_ascii (timestr, fileprefix, trace, sr, das_number, channel_number, stream_number)
            else :
                write_mseed (timestr, fileprefix, trace, sr, das_number, channel_number, stream_number)
        else :
            pass   #   debug
        
        
    return fileprefix[:-4]
        
def ms (m) :
    '''
       Calculate milliseconds
    '''
    a, b = map (float, string.split (m, '/'))
    return a / b / 1000.0
    
def str2epoch (s) :
    '''   Convert colon separated string to epoch   '''
    yr, jd, hr, mn, sc, ms = map (int, string.split (s, ":"))
    tm = TimeDoy.TimeDoy ()
    sec = float (sc) + float (ms) / 1000.0
    
    e = tm.epoch (yr, jd, hr, mn, 0)
    
    return e + sec

def process_errs (fileprefix, errs) :
    global OUTDIR, DAS
    
    if not errs : return
    #errs.reverse ()
    
    fh = open (os.path.join (OUTDIR, fileprefix + ".err"), "a+")
    for e in errs :
        fh.write (e + '\n')
        
    fh.close ()

def process_soh (fileprefix, soh, log) :
    '''
       Write SOH to file
    '''
    global OUTDIR, DAS, FIRST

    if not soh and not log : return
    soh.reverse (); log.reverse ()
    
    def next_log (a) :
        '''   Return next log entry from list a   '''
        new = []
        try :
            first = a.pop ()
            seq = int (first[:7])
            new.append (first)
        except IndexError :
            return 10000000, new
        
        while 1 :
            try :
                line = a.pop ()
            except IndexError :
                break
            
            if newLogRE.match (line) :
                a.append (line)
                break
            
            new.append (line)
        
        return seq, new
    
    fh = open (os.path.join (OUTDIR, fileprefix + ".log"), "a+")
    if FIRST :
        fh.write ("rt2ms: v%s Run time (UTC): %s\n" % (PROG_VERSION, time.ctime (time.time ())))
                  
    l = next_log (log); s = next_log (soh)
    while 1 :
        if l[0] < s[0] :
            for line in l[1] :
                #   Skip data packets
                if line[9:11] == 'DT' : continue
                if line[0:2] == 'ns' : continue
                fh.write (line + '\n')
                
            l = next_log (log)
        else :
            for line in s[1] :
                fh.write (line + '\n')
                
            s = next_log (soh)
            
        if not s[1] and not l[1] : break
    
    fh.close ()
        
def process_file () :
    '''
       Process rt-130 file(s)
    '''
    global RAWFILE, VERBOSE, FIRST, PARAMETERS
    if VERBOSE :
        sys.stderr.write ("%s version: %s\n" % (sys.argv[0], PROG_VERSION))
        
    for infile in RAWFILE :
        FIRST = True
        #if VERBOSE :
        sys.stderr.write ("Processing: %s\n" % infile)
            
        #pn = pn130.pn130 (infile, verbose = VERBOSE)
        
        try :
            pn = pn130.pn130 (infile, verbose = VERBOSE, par = PARAMETERS)
        except Exception, e :
            sys.stderr.write ("Error: Can't open %s. %s\n" % (infile, e))
            continue
        
        fileprefix = None
        while 1 :
            stream, points = pn.getEvent ()
            #   End of file
            if stream < 0 : break
            #   Corrupt packet
            if stream > NUM_STREAMS : break
            #   Empty data packet
            if not points : continue
            #   Get the event which is a list of events keyed on stream and channel
            events = pn.get_stream_event (stream)
            log = pn.get_logs ()
            soh = pn.get_soh ()
            streams = events.keys ()
            for s in streams :
                event = events[s]
                if VERBOSE :
                    try :
                        sys.stderr.write ("Event: %s " % event[0].event)
                        if event[0].event == 150 :
                            pass
                    except :
                        sys.stderr.write ("Event: ? ")
                    
                    try :
                        sys.stderr.write ("Stream: %d " % s)
                    except :
                        sys.stderr.write ("Stream: ? ")
                    
                    try :
                        sys.stderr.write ("Points: %d\n" % points)
                    except :
                        sys.stderr.write ("Points: ?\n")
                        
                #   Process event(s) by stream
                tmp = process_event (points, event)
                if fileprefix == None : fileprefix = tmp
    
                if LOG :
                    process_soh (fileprefix, soh, log)
                
                #   Process time errors
                errs = pn.get_errs ()
                if errs :
                    process_errs (fileprefix, errs)
                
                #   FIRST is a switch if True will print a header on the top of log file 
                FIRST = False
                
        del pn
        
if __name__ == '__main__' :
    import time as t
    then = t.time ()
    sys.stderr.write ("Version: %s\n" % PROG_VERSION)
    get_args ()
    if VERBOSE :
        sys.stderr.write ("%s\n" % sys.argv)
        
    process_file ()
    now = (t.time () - then) / 60.
    print "%9.2f minutes\n" % now
