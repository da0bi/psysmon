#!/usr/bin/env python
# LICENSE
#
# This file is part of pSysmon.
#
# If you use pSysmon in any program or publication, please inform and
# acknowledge its author Stefan Mertl (stefan@mertl-research.at).
#
# pSysmon is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
'''
The pSysmon main program.

:copyright:
    Stefan Mertl

:license:
    GNU General Public License, Version 3 
    (http://www.gnu.org/licenses/gpl-3.0.html)


Examples
-----------

**Starting from the command line**

    To start pSysmon from the command line, change into the psysmon directory 
    where the file pSysmon.py is located and type the following command in your 
    linux shell or your window command prompt:

    >>> psysmon

    or

    >>> python psysmon
'''
import matplotlib as mpl
mpl.rcParams['backend'] = 'WXAgg'

import psysmon
import psysmon.core.gui as psygui
import psysmon.core.base as psybase
import psysmon.core.json_util
import os
import logging


def run():
    '''
    Start the pSysmon main program.

    Basic Usage
    -----------

    **Starting from the command line**

        To start pSysmon from the command line, change into the psysmon directory 
        where the file pSysmon.py is located and type the following command in your 
        linux shell or your window command prompt:
        python pSysmon.py:

    **Starting from a python shell**

        To start psysmon from a python shell (e.g. ipython) use the following 
        commands:

        >>> import psysmon.pSysmon as psysmon
        >>> psysmon.run
    '''
    config = load_config()

    if 'pref_manager' in config.keys():
        pref_manager = config['pref_manager']
        main_loglevel = pref_manager.get_value('main_loglevel')
        shell_loglevel = pref_manager.get_value('shell_loglevel')
        status_loglevel = pref_manager.get_value('gui_status_loglevel')
    else:
        pref_manager = None
        main_loglevel = 'INFO'
        shell_loglevel = 'INFO'
        status_loglevel = 'INFO'

    logger = logging.getLogger('psysmon')
    logger.setLevel(main_loglevel)

    handler = psysmon.getLoggerHandler(log_level = shell_loglevel)
    handler.set_name('shell')
    logger.addHandler(handler)

    psyBaseDir = os.path.abspath(psysmon.__file__)
    psyBaseDir = os.path.dirname(psyBaseDir)
    logger.debug("psyBaseDir: %s", psyBaseDir)

    # Initialize the pSysmon base object.
    psyBase = psybase.Base(psyBaseDir, pref_manager = pref_manager)

    # Scan for available pSysmon packages.
    #psyBase.initialize()

    # Create the app and run the GUI.
    app = psygui.PSysmonApp()
    psysmonMain = psygui.PSysmonGui(psyBase, None)

    handler = psysmon.getLoggerWxRedirectHandler(psysmonMain.loggingPanel,
                                                 log_level = status_loglevel)
    handler.set_name('gui_status')
    logger.addHandler(handler)

    if 'recent_files' in config.keys():
        for cur_file in reversed(config['recent_files']):
            psysmonMain.filehistory.AddFileToHistory(cur_file)

    psysmonMain.Show()
    psysmonMain.Maximize(True)

    app.MainLoop()

    # Stop the project server.
    psyBase.stop_project_server()


def load_config():
    ''' Load the configuration data from the config file.
    '''
    import platform
    import json

    config = {}

    if platform.system() == 'Linux':
        config_dir = os.path.join(os.path.expanduser('~'), '.config', 'psysmon')
        config_file = os.path.join(config_dir, 'psysmon.cfg')
    elif platform.system() == 'Windows':
        if 'APPDATA' in os.environ:
            config_dir = os.path.join(os.environ['APPDATA'], 'psysmon')
            config_file = os.path.join(config_dir, 'psysmon.cfg')
        else:
            raise RuntimeError("Couldn't find the user defined folder. Can't create the config file.")
    else:
        raise RuntimeError("Couldn't find the user defined folder. Can't create the config file.")

    if os.path.exists(config_file):
        try:
            file_meta = psysmon.core.json_util.get_file_meta(config_file)
            decoder = psysmon.core.json_util.get_config_decoder(file_meta['file_version'])
            with open(config_file, 'r') as fid:
                config = json.load(fid, cls = decoder)
        except:
            config = {}


    return config

if __name__ == '__main__':
    run()




