#!/usr/bin/env python
# LICENSE
#
# This file is part of psysmomat.
#
# If you use psysmomat in any program or publication, please inform and
# acknowledge its author Stefan Mertl (stefan@mertl-research.at).
#
# psysmomat is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
'''
The psysmomat program.

:copyright:
    Stefan Mertl

:license:
    GNU General Public License, Version 3 
    (http://www.gnu.org/licenses/gpl-3.0.html)
'''

import argparse
import getpass
import glob
import logging
import os
import os.path

import matplotlib as mpl
mpl.use('Agg')
mpl.rcParams['backend'] = 'Agg'
import obspy.core.utcdatetime as utcdatetime

import psysmon
import psysmon.core.test_util as test_util
import psysmon.packages.geometry as geom



def load_project(filename):
    if os.path.exists(filename):
        project = psysmomat.core.project.load_project_from_file(pref_file = filename)
    else:
        project = None
        logger.error('Project file %s not found.', filename)
    return project



def handle_create_user_command(args, logger):
    logger.info('Creating a new psysmon user.')
    logger.debug(args)

    user_pwd = ''
    root_pwd = ''
    if args.password:
        user_pwd = getpass.getpass(prompt = 'New user password:')

    if args.root_password:
        root_pwd = getpass.getpass(prompt = 'Root password:')

    logger.debug(user_pwd)
    logger.debug(root_pwd)

    psybase = test_util.create_psybase()
    try:
        psybase.createPsysmonDbUser(rootUser = args.root_user,
                                    rootPwd = root_pwd,
                                    dbHost = args.db_host,
                                    user = args.name,
                                    userPwd = user_pwd)
    finally:
        psybase.stop_project_server()



def handle_new_project_command(args, logger):
    logger.info('Creating a new psysmon project ' + args.name + ' for user ' + args.user +'.')

    user_pwd = ''
    if args.password:
        user_pwd = getpass.getpass(prompt = 'User password:')

    psybase = test_util.create_psybase()
    try:
        project_created = psybase.createPsysmonProject(name = args.name,
                                                       base_dir = args.base_dir,
                                                       db_host = args.db_host,
                                                       user_name = args.user,
                                                       user_pwd = user_pwd,
                                                       author_name = args.author_name,
                                                       author_uri = args.author_uri,
                                                       agency_name = args.agency_name,
                                                       agency_uri = args.agency_uri)
    finally:
        psybase.stop_project_server()


def handle_remove_project_command(args, logger):
    logger.info('Removing the project %s.', args.project_file)

    user_pwd = ''
    if args.password:
        user_pwd = getpass.getpass(prompt = 'User password:')

    test_util.remove_project(project_file = args.project_file,
                             user_name = args.user,
                             user_pwd = user_pwd)


def handle_import_geometry_command(args, logger):
    logger.info('Importing the geometry from file %s.', args.geometry_file)

    user_name = args.user

    user_pwd = ''
    if args.password:
        user_pwd = getpass.getpass(prompt = 'User password:')

    if not args.project_file:
        # Try to get the project file from the current directory.
        project_files = glob.glob(os.path.join(os.getcwd(), '*.ppr'))
        if len(project_files) == 1:
            project_file = project_files[0]
        elif len(project_files) == 0:
            logger.error('No project file found in the current directory.')
            return
        else:
            logger.error('More than one project file found in the current directory: %s', project_files)
            return
    else:
        project_file = args.project_file


    psybase = test_util.create_psybase();
    try:
        load_success = psybase.load_json_project(project_file,
                                                user_name,
                                                user_pwd)

        inventory_parser = geom.inventory_parser.InventoryXmlParser()
        try:
            inventory = inventory_parser.parse(args.geometry_file)
        except Warning as w:
            print w

        # Clear the existing data from the geometry tables.
        project_slug = psybase.project.slug
        tables_to_clear = [table for table in reversed(psybase.project.dbMetaData.sorted_tables) if table.key.startswith(project_slug + '_geom')]
        for cur_table in tables_to_clear:
            psybase.project.dbEngine.execute(cur_table.delete())

        # Remove all elements from the session.
        psybase.project.geometry_inventory.db_session.expunge_all()

        db_inventory = psybase.project.geometry_inventory
        db_inventory.clear()
        for cur_sensor in inventory.sensors:
            db_inventory.add_sensor(cur_sensor)

        for cur_recorder in inventory.recorders:
            db_inventory.add_recorder(cur_recorder)

        for cur_network in inventory.networks:
            db_inventory.add_network(cur_network)

        for cur_array in inventory.arrays:
            db_inventory.add_array(cur_array)

        db_inventory.commit()
    finally:
        psybase.stop_project_server()



def handle_add_waveform_dir_command(args, logger):
    logger.info('Adding the waveform directory %s.', args.path)

    user_name = args.user

    user_pwd = ''
    if args.password:
        user_pwd = getpass.getpass(prompt = 'User password:')

    if not args.project_file:
        # Try to get the project file from the current directory.
        project_files = glob.glob(os.path.join(os.getcwd(), '*.ppr'))
        if len(project_files) == 1:
            project_file = project_files[0]
        else:
            logger.error('More than one project file found in the current directory.')
            return
    else:
        project_file = args.project_file

    if not args.description:
        args.description = ''


    psybase = test_util.create_psybase();
    try:
        load_success = psybase.load_json_project(project_file,
                                                user_name,
                                                user_pwd)
        wf_dir_orm = psybase.project.dbTables['waveform_dir']
        wf_dir_alias_orm = psybase.project.dbTables['waveform_dir_alias']

        wf_dir = wf_dir_orm(args.path,
                            args.description,
                            args.file_ext,
                            '',
                            '')
        wf_dir_alias = wf_dir_alias_orm(psybase.project.activeUser.name,
                                        args.path)
        wf_dir.aliases.append(wf_dir_alias)

        db_session = psybase.project.getDbSession()
        try:
            db_session.add(wf_dir)
            db_session.commit()
        finally:
            db_session.close()
    finally:
        psybase.stop_project_server()


def handle_update_command(args, logger):
    logger.debug('Updating the project ' + args.project + '.')
    logger.debug('Not yet implemented.')


def handle_info_command(args, logger):
    if args.project is None:
        project_files = glob.glob(os.path.join(os.getcwd(), '*.ppr'))

        if len(project_files) == 0:
            logger.error('No project file found in the current directory.')
            return
        elif len(project_files) > 1:
            logger.error("Multiple project files found, don't know which one to use.")
            return
        else:
            project_file = project_files[0]
    else:
        project_file = os.path.join(args.project, args.project + '.ppr')


    if os.path.exists(project_file):
        project = psysmon.core.project.load_project_from_file(project_file)
    else:
        logger.error("The project file %s doesn't exist.", project_file)
        return

    logger.debug('Getting information about the project ' + project_file + '.')

    print str(project)

    if args.listtask is True:
        # List the available tasks of the project.
        print 'Available tasks:'
        for cur_taskclass in sorted(project.task_classes):
            print '  ' + cur_taskclass.__name__ + '\n'


def handle_edit_command(args, logger):
    logger.debug('Editing the settings of project ' + args.project + '.')
    logger.debug('Not yet implemented.')


def handle_execute_command(args, logger):
    logger.info('Executing the collection %s.', args.collection)

    user_name = args.user

    user_pwd = ''
    if args.password and not args.passphrase:
        user_pwd = getpass.getpass(prompt = 'User password:')
    elif args.password:
        user_pwd = args.passphrase

    if not args.project_file:
        # Try to get the project file from the current directory.
        project_files = glob.glob(os.path.join(os.getcwd(), '*.ppr'))
        if len(project_files) == 1:
            project_file = project_files[0]
        else:
            logger.error('More than one project file found in the current directory.')
            return
    else:
        project_file = args.project_file



    psybase = test_util.create_psybase();
    try:
        load_success = psybase.load_json_project(project_file,
                                                user_name,
                                                user_pwd)
        # Set the log level.
        psybase.pref_manager.set_value('main_loglevel', 'DEBUG')
        psybase.pref_manager.set_value('shell_loglevel', 'ERROR')
        psybase.pref_manager.set_value('collection_loglevel', 'DEBUG')
        psybase.project.setActiveCollection(args.collection)
        if args.starttime and args.endtime:
            # Set the global time span of the collection.
            psybase.project.getActiveCollection().runtime_att.start_time = utcdatetime.UTCDateTime(args.starttime)
            psybase.project.getActiveCollection().runtime_att.end_time = utcdatetime.UTCDateTime(args.endtime)
        if args.db_host:
            psybase.project.dbHost = args.db_host
        psybase.project.executeCollection()
    finally:
        psybase.stop_project_server()




if __name__ == '__main__':

    parser = argparse.ArgumentParser(description='psysmomat')
    subparsers = parser.add_subparsers(title = 'sub commands',
                                       description = 'valid sub commands')

    parser.add_argument('--loglevel', help = 'Specify the log level.',
                        type = str, choices = ['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL', 'NOTSET'],
                        default = 'WARNING')

    # Create the parser for the create_user command.
    parser_new_user = subparsers.add_parser('new_user', help = 'Create a new psysmon database user.')
    parser_new_user.set_defaults(func = handle_create_user_command)
    parser_new_user.add_argument('name', help = 'The name of the new user.',
                                 type = str, metavar = 'USER_NAME')
    parser_new_user.add_argument('-p', '--password', help = 'Specify the password for the user.',
                                 action = 'store_true')
    parser_new_user.add_argument('-d', '--db_host', help = 'The host on which the mysql server is running.',
                                type = str, metavar = 'HOST', default = 'localhost')
    parser_new_user.add_argument('-ru', '--root_user', help = 'The name of the database user with the privileges to create a new user (e.g. the root user).',
                                 type = str, metavar = 'ROOT_USER_NAME', default = 'root')
    parser_new_user.add_argument('-rp', '--root_password', help = 'Specify the password for the root user.',
                                 action = 'store_true')


    # Create the parser for the 'new_project' command.
    parser_new_project = subparsers.add_parser('new_project', help = 'Create a new psysmon project.')
    parser_new_project.set_defaults(func = handle_new_project_command)
    parser_new_project.add_argument('name', help = 'The project name.',
                            type = str, metavar = 'PROJECT_NAME')
    parser_new_project.add_argument('user', help = 'The psysmon user owning the new project.',
                            type = str, metavar = 'USER')
    parser_new_project.add_argument('-p', '--password', help = 'Specify the password for the user.',
                                 action = 'store_true')
    parser_new_project.add_argument('-bd', '--base_dir', help = 'Specify the project base directory.',
                            type = str, metavar = 'PROJECT_PATH', default = '')
    parser_new_project.add_argument('-d', '--db_host', help = 'The host on which the mysql server is running.',
                                type = str, metavar = 'HOST', default = 'localhost')
    parser_new_project.add_argument('-an', '--author_name', help = 'The full name of the user.',
                            type = str, metavar = 'AUTHOR_NAME', default = '')
    parser_new_project.add_argument('-auri', '--author_uri', help = 'The URI of the user.',
                            type = str, metavar = 'AUTHOR_URI', default = '')
    parser_new_project.add_argument('-agn', '--agency_name', help = 'The name of the agency to which the user is affiliated.',
                            type = str, metavar = 'AGENCY_NAME', default = '')
    parser_new_project.add_argument('-aguri', '--agency_uri', help = 'The URI of the agency to which the user is affiliated.',
                            type = str, metavar = 'AGENCY_URI', default = '')


    # Create the parser for the 'remove_project' command.
    parser_remove_project = subparsers.add_parser('remove_project', help = 'Remove a psysmon project (including database tables and file structure.')
    parser_remove_project.set_defaults(func = handle_remove_project_command)
    parser_remove_project.add_argument('project_file', help = 'The project file of the project to remove.',
                                        type = str, metavar = 'PROJECT_FILE')
    parser_remove_project.add_argument('user', help = 'The user owning the project to remove.',
                                       type = str, metavar = 'USER')
    parser_remove_project.add_argument('-p', '--password', help = 'Specify the password for the user.',
                                       action = 'store_true')


    # Create the parser for the 'import_geometry' command.
    parser_import_geometry = subparsers.add_parser('import_geometry', help = 'Import a psysmon geometry XML file to the database.')
    parser_import_geometry.set_defaults(func = handle_import_geometry_command)
    parser_import_geometry.add_argument('geometry_file', help = 'The geometry file to import.',
                                        type = str, metavar = 'GEOMETRY_FILE')
    parser_import_geometry.add_argument('-pf', '--project_file', help = 'The project file to work with.',
                                        type = str, metavar = 'PROJECT_FILE')
    parser_import_geometry.add_argument('-u', '--user', help = 'The user owning the project to which to import the geometry.',
                                       type = str, metavar = 'USER')
    parser_import_geometry.add_argument('-p', '--password', help = 'Specify the password for the user.',
                                       action = 'store_true')


    # Create the parser for the 'add_waveform_directory' command.
    parser_add_waveform_dir = subparsers.add_parser('add_waveform_dir', help = 'Add a waveform directory tothe database waveclient.')
    parser_add_waveform_dir.set_defaults(func = handle_add_waveform_dir_command)
    parser_add_waveform_dir.add_argument('path', help = 'The absolute path to the waveform directory.',
                                        type = str, metavar = 'PATH')
    parser_add_waveform_dir.add_argument('file_ext', help = 'The file extensions of the data files in the waveform directory (e.g. "*.msd,*.mseed").',
                                        type = str, metavar = 'FILE_EXT')
    parser_add_waveform_dir.add_argument('-d', '--description', help = 'The description of the waveform directory.',
                                        type = str, metavar = 'DESCRIPTION')
    parser_add_waveform_dir.add_argument('-pf', '--project_file', help = 'The project file to work with.',
                                        type = str, metavar = 'PROJECT_FILE')
    parser_add_waveform_dir.add_argument('-u', '--user', help = 'The user owning the project to which to import the geometry.',
                                       type = str, metavar = 'USER')
    parser_add_waveform_dir.add_argument('-p', '--password', help = 'Specify the password for the user.',
                                       action = 'store_true')



    # Create the parser for the 'execute' command.
    parser_execute = subparsers.add_parser('execute', help = 'Execute a collection of the project.')
    parser_execute.set_defaults(func = handle_execute_command)
    parser_execute.add_argument('collection', help = 'The name of the collection to execute.',
                                type = str, metavar = 'COLLECTION')
    parser_execute.add_argument('-pf', '--project_file', help = 'The project file to work with.',
                                type = str, metavar = 'PROJECT_FILE')
    parser_execute.add_argument('-u', '--user', help = 'The user owning the project to which to import the geometry.',
                                type = str, metavar = 'USER')
    parser_execute.add_argument('-p', '--password', help = 'A password is needed.',
                                action = 'store_true')
    parser_execute.add_argument('-pp', '--passphrase', help = 'The passphrase of the user.',
                                type = str, metavar = 'PASSPHRASE', default = '')
    parser_execute.add_argument('-s', '--starttime', help = 'Specify the global starttime. This overrides every starttime in the tasks.',
                            type = str, metavar = 'STARTTIME')
    parser_execute.add_argument('-e', '--endtime', help = 'Specify the global endtime. This overrides every endtime in the tasks.',
                            type = str, metavar = 'ENDTIME')
    parser_execute.add_argument('-d', '--db_host', help = 'The host on which the mysql server is running.',
                                type = str, metavar = 'HOST', default = 'localhost')


    # Create the parser for the 'update' command.
    parser_update = subparsers.add_parser('update', help = 'Update a project.')
    parser_update.set_defaults(func = handle_update_command)
    parser_update.add_argument('project', help = 'Specifiy the project to use.',
                            type = str, metavar = 'PROJECT_NAME')


    # Create the parser for the 'info' command.
    parser_info = subparsers.add_parser('info', help = 'Get information about the project.')
    parser_info.set_defaults(func = handle_info_command)
    parser_info.add_argument('project', help = 'Specifiy the project to use.',
                            type = str, metavar = 'PROJECT_NAME', nargs = '?', default = None)
    parser_info.add_argument('-a', '--all', help = 'List all the information of the project',
                             action = 'store_true')
    parser_info.add_argument('-lt', '--listtask', help = 'List all available tasks',
                             action = 'store_true')
    parser_info.add_argument('-ltl', '--listtasklist', help = 'List all available tasklists',
                             action = 'store_true')
    parser_info.add_argument('-tl', '--tasklist', help = 'Get information about the specified tasklist.',
                                type = str, metavar = 'TASKLIST_NAME')


    # Create the parser for the 'edit' command.
    parser_edit = subparsers.add_parser('edit', help = 'Edit the settings of a project.')
    parser_edit.set_defaults(func = handle_edit_command)

    # Add name of the project as a positional argument. The project name
    # always has to be specified.


    args = parser.parse_args()

    logger = logging.getLogger('psysmon')
    logger.setLevel(args.loglevel)
    shell_handler = psysmon.getLoggerHandler(log_level = args.loglevel)
    shell_handler.setLevel(args.loglevel)
    logger.addHandler(shell_handler)

    args.func(args, logger)


